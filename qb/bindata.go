// Code generated by go-bindata.
// sources:
// static/index.html
// DO NOT EDIT!

package qb

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x51\x6f\xe3\x36\x0c\x7e\xb6\x7f\x05\x21\x60\x80\x0d\xa4\x71\x37\xf4\x1e\xe6\x38\x79\xe8\x6e\xc0\x36\x0c\x77\xdb\xae\x6f\x45\x51\xa8\x16\x6b\x6b\x53\xe4\x9c\x24\x67\x17\x04\xfe\xef\x03\x25\xcb\x49\xaf\x69\x76\x2b\x86\x2b\x50\x44\x21\x3f\x92\x9f\xc8\x4f\x6c\xab\xd6\xad\xd5\x2a\x05\xa8\x5a\xe4\x82\x0e\x00\x95\x93\x4e\xe1\xea\x6d\x63\xf8\xa6\x85\xdf\x7b\x34\x3b\xf8\x95\xeb\xa6\xe7\x0d\xc2\x8d\xe1\xda\x2a\xee\x3a\x53\x15\x01\x17\x62\xac\xdb\xc5\x33\xc0\x5c\xea\x4d\xef\x60\x9f\x26\x00\x42\xda\x8d\xe2\xbb\x12\x1a\x23\xc5\x82\x2c\x74\xb8\x70\xb8\xde\x28\xee\xf0\xa2\xee\x54\xbf\xd6\xb6\x84\x37\x97\xdf\xd0\xef\x09\x08\x37\xc8\x6d\x49\x76\xfa\x61\xd1\x0e\x82\x3b\xce\x16\x63\xcd\x21\x7d\x5a\x7c\x3e\xc1\xf6\x53\x46\x4a\x54\x42\x74\xbc\x18\x49\x79\x9f\x45\x91\xf1\x59\x84\xc3\x4f\x8e\xdc\x01\xfd\xb7\x14\xae\x2d\xe1\xfb\x37\xe1\x12\x2d\xca\xa6\x75\x25\x5c\x5d\x1a\x5c\x1f\x42\x7d\xbb\x8a\xa9\x5f\x55\x11\x3b\x5f\x3d\x74\x62\x37\xb6\x53\xc8\x2d\xd4\x8a\x5b\xbb\x64\x9e\x14\x8b\xad\x3d\xf6\xc4\x8b\xb0\x55\x9a\x54\xed\xd5\x2a\x7e\xaf\x8a\xf6\x8a\x4c\x91\x1d\x9d\x8b\xe3\x2f\x0f\xbd\x73\x9d\x06\x29\x96\xcc\x8d\xf3\xc4\x8b\x43\xb6\xc9\x56\x15\x01\x39\x15\x2f\x84\xdc\xae\xd2\x13\x54\xfc\x28\x46\x1a\x74\x7e\x4e\xe1\x36\x05\xd8\xfb\x48\xc6\x95\xe4\x96\x95\xc0\x1e\x14\x17\x68\x7a\xad\xd1\xb0\x59\xf0\x3d\xf6\xba\x66\xe5\x88\x24\xac\x73\x86\xa0\x9a\xaf\x71\xc4\x00\x30\xc5\x75\x43\x56\xd4\x07\x9b\x47\x90\xed\xe3\xc1\xc6\x4d\x43\x85\x6e\xd3\xc4\x0f\x88\x6d\xb9\xea\x3d\xe8\x9a\x2a\xc3\x1f\xa1\x74\x9a\x0c\x63\xc0\x9d\xff\x1c\x46\x2e\x75\x2b\x95\x30\xa8\x7d\x86\x00\xd8\xa7\xc9\x44\xa9\x97\x82\xc5\xa9\xce\x4e\xf8\x47\xca\x89\x67\x3b\xd2\x00\xcf\x39\x4d\xee\xce\x05\x4a\x2d\x9d\xe4\xea\xde\xa0\x42\x6e\xf1\x5e\xd0\x54\xce\x56\x42\xf7\xa8\xe4\xa7\xfb\x23\x42\x69\xbc\xce\x90\xde\x7d\xd1\xf8\xc3\x04\xff\x6d\xf4\x4f\x8e\x55\x11\x15\x5b\xd9\xda\xc8\x8d\x0b\x7e\x1a\xa1\x93\x9d\x06\x8b\xee\x66\x14\xd5\x4f\x5c\x0b\x85\x26\xcb\x89\xb7\xe8\xea\x7e\x8d\xda\xcd\x1b\x74\x3f\x2a\xa4\xe3\xf5\xee\x67\x91\x9d\x12\x63\x3e\xef\x74\xad\x64\xfd\x17\x2c\x21\xcb\x61\xb9\x0a\x4f\x0d\x40\xa1\xf3\xcf\x0f\x96\x10\xf3\xa5\x49\x72\x94\xd2\x5e\xef\x7e\x20\x71\xbe\xe3\x6b\xcc\xc6\x57\x94\xdf\x5e\xde\x9d\x43\x1d\xca\x9e\x02\xde\xf0\x26\xc2\x42\x33\x27\x98\xd7\xd5\x22\x0d\xcc\x1e\xd1\xd5\x6d\xc6\x0a\xbe\x91\xc5\xf6\xdb\x62\xc3\x8d\x45\x36\x23\xde\xc9\x1a\x5d\xdb\x89\x12\xd8\x6f\xef\x3f\xdc\x90\x36\x12\xea\x60\x09\xbf\x7c\x78\xff\x6e\x6e\x9d\x91\xba\x91\x8f\xbb\x8c\xa0\x94\xe9\x23\xed\xde\xd2\x5f\x73\x36\x9a\xb6\xdc\x48\xfe\xa0\xd0\x96\xb0\x1f\xc8\x38\xe4\xb3\x50\x76\xc8\xe7\xae\x45\x9d\x19\xb4\x1b\xea\x13\x7d\xce\xff\xb4\x9d\xce\xf2\xd1\xe3\xf7\x5a\xe8\x60\x72\xd4\x33\xbf\xfa\xbe\xa8\x6f\x67\x91\x5e\x40\x2f\x02\x5f\xec\x9d\x87\xfa\xfe\xc1\xf2\xf3\x3e\x50\xca\x19\xe8\x5e\xa9\x19\x7c\x97\x2f\xe2\x3d\x17\x69\x32\x84\x7d\x3a\x2e\xe2\x63\xc5\xbd\xe5\x8e\xff\x57\xb5\x05\xea\x5f\x55\x69\xc7\xdd\xfa\x3f\x54\x36\x29\xf7\xd5\x42\x93\xa4\x29\xef\xf7\x8a\xcd\xa8\x7c\x1e\x65\xe7\x57\x76\x09\x8c\xbd\x52\x87\x94\xec\x2b\xe9\xf0\xf3\x37\xfc\x5a\x2d\x86\x3f\xf8\x2f\x49\xee\xd4\x6e\x5b\x44\xcf\x13\x0d\x2e\xfc\xa6\x8c\x0b\xb2\x2a\xc2\x7f\x5c\xff\x04\x00\x00\xff\xff\x1f\x59\x7d\x89\x79\x09\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 2425, mode: os.FileMode(420), modTime: time.Unix(1547723563, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

