// Code generated by go-bindata.
// sources:
// tmpl/query.tmpl
// DO NOT EDIT!

package render

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplQueryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x3d\x8f\xdb\x30\x0c\xdd\xf3\x2b\x08\x4f\x3d\xa0\xf1\xd0\xf1\xa6\x5e\x0f\x0d\xd0\xa1\x01\xba\x74\xe7\xc5\xcc\x59\x85\x22\x3b\x12\x7d\xe8\x55\xd1\x7f\x2f\xf4\x65\xcb\x49\xed\x74\xa3\x88\xc7\x27\x3e\x3e\x4a\xd6\x6e\xa1\xa1\xa3\x50\x04\xd5\x1b\xea\x0a\xb6\xce\x6d\xac\x05\x71\x84\xfa\x27\x6a\x70\xce\xda\x1c\x01\x1a\xb0\x16\x48\x35\x10\x40\xdb\x10\xfa\x82\x4d\x49\xd3\x6b\x6a\x22\x8f\x8f\x1e\x7d\x49\xfd\xc4\xac\x57\x8b\x0e\xdd\xa0\x38\x56\x85\xf0\x43\x51\x15\x18\x76\x42\x32\x69\xb8\xc0\x31\x06\xce\x3d\x2c\xb3\xa1\x14\x68\xb2\x96\x6d\x10\xf3\xe4\x53\x59\x5d\x3a\x39\xf7\x38\xe3\x58\xe4\x53\x9d\x3e\xa1\x14\x7f\x68\xce\xb9\xcf\xe9\x90\xfd\x3c\xa2\xfe\x97\xb4\xb9\xe2\xdb\x0d\xea\x10\xa7\x04\x4c\xa7\x5e\x22\x67\x57\xea\x64\x84\xd7\xaf\xa6\x58\x28\x26\xad\x50\xee\xd4\xf2\x98\x60\xc6\x56\x28\xa9\x73\x0d\x5c\xe0\x55\x77\x43\xff\xe5\x7d\xb4\x48\x1a\x0a\x1d\x7d\x47\x6e\xbf\xfe\xee\x17\x9a\x0a\x7d\x9c\x90\xdb\x2b\xe0\x44\x40\xe7\xe4\x62\xf5\x86\xb2\xba\x66\x49\x36\x65\x71\xc9\xee\x60\xfd\x9e\xa8\x31\x7e\xed\x2e\x20\x85\xe1\x5f\x9d\x50\x50\xd5\x7b\x3c\x51\x05\xd5\xc7\x6a\xb2\xbf\xbc\x28\x98\x9a\xf6\x6f\xa5\xe3\x29\x19\xa1\xf5\x3f\xbb\x8e\x64\xa6\xed\x34\x93\xe1\x55\x42\x3f\xc1\x0c\xbc\x19\xe1\x37\xf3\xec\x17\xfa\xa6\x7e\x2e\xfe\x4e\xa3\xe9\x79\xcc\x3b\xbd\xd3\x11\x32\x6b\xf1\x32\x30\xad\xef\xc6\xdc\xfe\x9c\x39\xe2\x81\xd8\xdc\x24\x76\xb9\x72\x5c\xeb\xbc\xd5\x5e\xea\x73\x2b\x64\xa3\x29\x2e\x23\x94\x08\x80\x70\xd4\xa8\x5e\x69\x86\x0b\x7f\x8d\x3a\xc8\xa1\x19\x5f\x44\x5c\xec\x86\x14\xc3\x27\x8f\x48\xb5\xe3\xb7\x73\x73\x95\x5b\xfa\x95\xce\x03\xe9\x77\x18\xdf\x7b\x14\x93\x7e\x36\x81\x2f\x92\x4c\x5e\xb7\x29\xe1\x87\x81\x7d\x7b\x96\x25\xe6\x61\xbc\x00\xec\xa6\x10\xf2\x63\x20\x2d\x02\x22\xce\x60\x5d\x48\xa1\xc2\xfd\x0d\x00\x00\xff\xff\xcd\x7b\x51\xe3\x78\x05\x00\x00")

func tmplQueryTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplQueryTmpl,
		"tmpl/query.tmpl",
	)
}

func tmplQueryTmpl() (*asset, error) {
	bytes, err := tmplQueryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/query.tmpl", size: 1400, mode: os.FileMode(420), modTime: time.Unix(1547672537, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/query.tmpl": tmplQueryTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"query.tmpl": &bintree{tmplQueryTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

